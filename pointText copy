const canvas = document.getElementById('hoverText1');
const ctx = canvas.getContext('2d');
canvas.width = window.innerWidth;
canvas.height = window.innerHeight;
let particleArray = [];
let adjustX = 0;
let adjustY = -300;
ctx.fillStyle = '#FFFAF5';
// canvas.setClearColor('#FFFAF5')
// handle mouse
const mouse = {
  x: null,
  y: null,
  radius: 200
};

canvas.addEventListener("mousemove", function (event) {
  const rect = canvas.getBoundingClientRect();
  mouse.x = event.clientX - rect.left;
  mouse.y = event.clientY - rect.top;
  console.log(mouse.x, mouse.y);
});

const elements = document.querySelectorAll('.hover-point');
elements.forEach(element => {
  element.style.fontFamily = 'YJost, sans-serif';
});

const text = 'Compilation of Interaction Design Architecture and ... work';
const textSize = 200;
ctx.font = `${textSize}px Jost, Arial`;
ctx.textAlign = 'center';
ctx.textBaseline = 'middle';

function wrapText(context, text, x, y, maxWidth, lineHeight) {
  let words = text.split(' ');
  let line = '';
  
  for (let i = 0; i < words.length; i++) {
    let testLine = line + words[i] + ' ';
    let metrics = context.measureText(testLine);
    let testWidth = metrics.width;

    if (testWidth > maxWidth && i > 0) {
      context.fillText(line, x, y);
      line = words[i] + ' ';
      y += lineHeight;
    } else {
      line = testLine;
    }
  }
  
  context.fillText(line, x, y);
}

const maxWidth = canvas.width * 0.8; // 80% of canvas width
const lineHeight = 1.2 * textSize; // Adjust line height as needed

const x = canvas.width / 2;
const y = canvas.height / 2 - lineHeight / 2; // Center the text vertically

wrapText(ctx, text, x, y, maxWidth, lineHeight);


// const text = 'Compilation of Interactiondesing architecture and .... work';
// const textSize = 200;
// ctx.font = `${textSize}px Jost, Arial`;



// ctx.textAlign = 'center';
// ctx.textBaseline = 'middle';
// const textWidth = ctx.measureText(text).width;
// ctx.fillText(text, canvas.width / 2, canvas.height / 2);

const textCoordinates = ctx.getImageData(0, 0, canvas.width, canvas.height);

class Particle {
  constructor(x, y) {
    this.x = x;
    this.y = y;
    this.size = .5;
    this.baseX = this.x;
    this.baseY = this.y;
    this.density = (Math.random() * 100) + 1;
  }

  draw() {
    ctx.fillStyle = '#FF7B00';
    ctx.beginPath();
    ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
    ctx.closePath();
    ctx.fill();
  }

  update() {
    let dx = mouse.x - this.x;
    let dy = mouse.y - this.y;
    let distance = Math.sqrt(dx * dx + dy * dy);
    let forceDirectionX = dx / distance;
    let forceDirectionY = dy / distance;
    let maxDistance = mouse.radius;
    let force = (maxDistance - distance) / maxDistance;
    let directionX = forceDirectionX * force * this.density;
    let directionY = forceDirectionY * force * this.density;

    if (distance < mouse.radius) {
      this.x -= directionX;
      this.y -= directionY;
    } else {
      if (this.x !== this.baseX) {
        let dx = this.x - this.baseX;
        this.x -= dx / 10;
      }
      if (this.y !== this.baseY) {
        let dy = this.y - this.baseY;
        this.y -= dy / 10;
      }
    }
  }
}

for (let y = 0; y < canvas.height; y += 3) {
  for (let x = 0; x < canvas.width; x += 3) {
    const pixelIndex = (y * canvas.width + x) * 4;
    if (textCoordinates.data[pixelIndex + 3] > 128) {
      particleArray.push(new Particle(x, y+adjustY));
    }
  }
}

function animate() {
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  for (let i = 0; i < particleArray.length; i++) {
    particleArray[i].draw();
    particleArray[i].update();
  }
  requestAnimationFrame(animate);
}

animate();
